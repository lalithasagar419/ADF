{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText3",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          City as string,",
				"          NoOfChildren as string,",
				"          MinAgeOfChild as string,",
				"          MaxAgeOfChild as string,",
				"          Tenure as string,",
				"          FrquncyOfPurchase as string,",
				"          NoOfUnitsPurchased as string,",
				"          FrequencyOFPlay as string,",
				"          NoOfGamesPlayed as string,",
				"          NoOfGamesBought as string,",
				"          FavoriteChannelOfTransaction as string,",
				"          FavoriteGame as string,",
				"          TotalRevenueGenerated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(equals(City, \"1\"),",
				"     disjoint: false) ~> split1@(city1, city2)",
				"split1@city1 filter(toInteger(NoOfChildren) <= 5",
				") ~> filter1",
				"filter1 aggregate(groupBy(NoOfChildren),",
				"     {total revenue} = sum(toInteger(TotalRevenueGenerated))) ~> aggregate1",
				"split1@city2 filter(toInteger(NoOfChildren)<=5) ~> filter2",
				"filter2 aggregate(groupBy(NoOfChildren),",
				"     totalrevenue = sum(toInteger(TotalRevenueGenerated))) ~> aggregate2",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"aggregate2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}